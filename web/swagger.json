{
  "openapi": "3.0.3",
  "info": {
    "title": "Nightell APIs",
    "description": "Nightell OpenAPI (Swagger) Documentation",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://nightell.neatplex.com/api/v1"
    }
  ],
  "paths": {
    "/settings": {
      "get": {
        "summary": "Settings",
        "description": "Get default settings for applications.",
        "tags": [
          "Settings"
        ],
        "responses": {
          "200": {
            "description": "The settings returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "android_last_version": {
                      "type": "string",
                      "example": "1.2.3",
                      "description": "The version of the last Android application"
                    },
                    "android_last_supported_version": {
                      "type": "string",
                      "example": "1.2.3",
                      "description": "The version of the last supported Android application"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/otp/email/send": {
      "post": {
        "summary": "Send OTP",
        "description": "Generate and send new OTP using email in order to sign up or sign in.",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "$ref": "#/components/schemas/User_Email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The OTP generated and sent successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ttl": {
                      "type": "integer",
                      "default": "120",
                      "description": "The time to live (number of seconds that otp is valid)"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/otp/email/verify": {
      "post": {
        "summary": "Verify OTP",
        "description": "Verify OTP received by email to complete sign in or sign up process.",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "otp"
                ],
                "properties": {
                  "email": {
                    "$ref": "#/components/schemas/User_Email"
                  },
                  "otp": {
                    "type": "string",
                    "example": "012345",
                    "description": "The OTP received by email",
                    "pattern": "^[0-9]{6}$",
                    "maxLength": 6,
                    "minLength": 6
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user signed in or signed up successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/User"
                    },
                    "token": {
                      "type": "string",
                      "description": "The bearer token for authentication"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/sign-in/email": {
      "post": {
        "summary": "Sign in by email",
        "description": "Sign in by email and password.",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "$ref": "#/components/schemas/User_Email"
                  },
                  "password": {
                    "$ref": "#/components/schemas/User_Password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user signed in successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/User"
                    },
                    "token": {
                      "type": "string",
                      "description": "The bearer token for authentication"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/sign-in/username": {
      "post": {
        "summary": "Sign in by username",
        "description": "Sign in by username and password.",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "username",
                  "password"
                ],
                "properties": {
                  "username": {
                    "$ref": "#/components/schemas/User_Username"
                  },
                  "password": {
                    "$ref": "#/components/schemas/User_Password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user signed in successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/User"
                    },
                    "token": {
                      "type": "string",
                      "description": "The bearer token for authentication"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/sign-in/google": {
      "post": {
        "summary": "Sign in/up using Google",
        "description": "Sign in or sign up using Google SSO (Single Sign On).",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "google_token"
                ],
                "properties": {
                  "google_token": {
                    "type": "string",
                    "example": "abc.123.xyz",
                    "description": "The ID Token (JWT) received from Google"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user signed in or signed up successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/User"
                    },
                    "token": {
                      "type": "string",
                      "description": "The bearer token for authentication"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/profile": {
      "get": {
        "summary": "Get profile",
        "description": "Get my profile details.",
        "tags": [
          "Profile"
        ],
        "responses": {
          "200": {
            "description": "My profile returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/User"
                    },
                    "followers_count": {
                      "type": "integer",
                      "example": 666
                    },
                    "followings_count": {
                      "type": "integer",
                      "example": 666
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete account",
        "description": "Submit delete account request for my account.",
        "tags": [
          "Profile"
        ],
        "responses": {
          "204": {
            "description": "Delete account request submitted."
          }
        }
      }
    },
    "/profile/name": {
      "patch": {
        "summary": "Update name",
        "description": "Update my name.",
        "tags": [
          "Profile"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "$ref": "#/components/schemas/User_Name"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The name updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/profile/bio": {
      "patch": {
        "summary": "Update bio",
        "description": "Update my bio (biography).",
        "tags": [
          "Profile"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "bio": {
                    "$ref": "#/components/schemas/User_Bio"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The bio updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/profile/username": {
      "patch": {
        "summary": "Update username",
        "description": "Update my username.",
        "tags": [
          "Profile"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "username"
                ],
                "properties": {
                  "username": {
                    "$ref": "#/components/schemas/User_Username"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The username updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/profile/password": {
      "patch": {
        "summary": "Update password",
        "description": "Update my password.",
        "tags": [
          "Profile"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "password"
                ],
                "properties": {
                  "password": {
                    "$ref": "#/components/schemas/User_Password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The username updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/profile/image": {
      "patch": {
        "summary": "Update image",
        "description": "Update (upload) my image (photo).",
        "tags": [
          "Profile"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "image_id"
                ],
                "properties": {
                  "image_id": {
                    "$ref": "#/components/schemas/User_ImageId"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The image updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/profile/email": {
      "patch": {
        "summary": "Update email",
        "description": "Update my email (It generates OTP and needs email verification process).",
        "tags": [
          "Profile"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "$ref": "#/components/schemas/User_Email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The OTP generated and sent successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ttl": {
                      "type": "integer",
                      "default": "120",
                      "description": "The time to live (number of seconds that otp is valid)"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/profile/email/verification": {
      "post": {
        "summary": "Verify my new email",
        "description": "Verify OTP received by email to complete the process of updating my email.",
        "tags": [
          "Profile"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "otp"
                ],
                "properties": {
                  "email": {
                    "$ref": "#/components/schemas/User_Email"
                  },
                  "otp": {
                    "type": "string",
                    "example": "012345",
                    "description": "The OTP received by email",
                    "pattern": "^[0-9]{6}$",
                    "maxLength": 6,
                    "minLength": 6
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The email updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/files": {
      "post": {
        "summary": "Upload file",
        "description": "Upload a new file.",
        "tags": [
          "Files"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "extension",
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "The file to upload"
                  },
                  "extension": {
                    "$ref": "#/components/schemas/File_Extension"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The file uploaded successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "file": {
                      "$ref": "#/components/schemas/File"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "summary": "Get user",
        "description": "Get the user.",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The ID of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "example": "13",
              "format": "uint64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user details returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/User"
                    },
                    "followers_count": {
                      "type": "integer",
                      "example": 666
                    },
                    "followings_count": {
                      "type": "integer",
                      "example": 666
                    },
                    "followed_by_me": {
                      "type": "boolean",
                      "description": "True if I follow the user"
                    },
                    "follows_me": {
                      "type": "boolean",
                      "description": "True if user follows me"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/followings": {
      "get": {
        "summary": "Index user followings",
        "description": "Index the followings of the user.",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The ID of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "example": "13",
              "format": "uint64"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of items to retrieve",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 5,
              "default": 10
            }
          },
          {
            "name": "lastId",
            "in": "query",
            "description": "The ID of the last item retrieved",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 13,
              "default": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of user followings returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "users": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/followers": {
      "get": {
        "summary": "Index user followers",
        "description": "Index the followers of the user.",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The ID of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "example": "13",
              "format": "uint64"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of items to retrieve",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 5,
              "default": 10
            }
          },
          {
            "name": "lastId",
            "in": "query",
            "description": "The ID of the last item retrieved",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 13,
              "default": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of user followers returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "posts": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Follow user",
        "description": "Follow the user (submit myself as the user follower).",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The ID of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "example": "13",
              "format": "uint64"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The user followed successfully."
          }
        }
      },
      "delete": {
        "summary": "Unfollow user",
        "description": "Unfollow the user (delete myself from the user followers).",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The ID of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "example": "13",
              "format": "uint64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user unfollowed successfully."
          }
        }
      }
    },
    "/users/{userId}/posts": {
      "get": {
        "summary": "Index user posts",
        "description": "Index the posts of the user.",
        "tags": [
          "Posts"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The ID of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "example": "13",
              "format": "uint64"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of items to retrieve",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 5,
              "default": 10
            }
          },
          {
            "name": "lastId",
            "in": "query",
            "description": "The ID of the last item retrieved",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 13,
              "default": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of the user posts returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "posts": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Post"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/posts": {
      "post": {
        "summary": "Create post",
        "description": "Create a new post.",
        "tags": [
          "Posts"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Post_New"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The new post created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "post": {
                      "$ref": "#/components/schemas/Post"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/posts/{postId}": {
      "get": {
        "summary": "Get post",
        "description": "Get the post.",
        "tags": [
          "Posts"
        ],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "The ID of the post",
            "required": true,
            "schema": {
              "type": "integer",
              "example": "13",
              "format": "uint64"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The post returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "post": {
                      "$ref": "#/components/schemas/Post"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update post",
        "description": "Update the post.",
        "tags": [
          "Posts"
        ],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "The ID of the post",
            "required": true,
            "schema": {
              "type": "integer",
              "example": "13",
              "format": "uint64"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "$ref": "#/components/schemas/Post_Title"
                  },
                  "description": {
                    "$ref": "#/components/schemas/Post_Description"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The post updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "post": {
                      "$ref": "#/components/schemas/Post"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete post",
        "description": "Delete the post.",
        "tags": [
          "Posts"
        ],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "The ID of the post",
            "required": true,
            "schema": {
              "type": "integer",
              "example": "13",
              "format": "uint64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The post deleted successfully."
          }
        }
      }
    },
    "/posts/{postId}/likes": {
      "get": {
        "summary": "Index post likes",
        "description": "Index the likes of the post.",
        "tags": [
          "Likes"
        ],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "The ID of the post",
            "required": true,
            "schema": {
              "type": "integer",
              "example": "13",
              "format": "uint64"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of items to retrieve",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 5,
              "default": 10
            }
          },
          {
            "name": "lastId",
            "in": "query",
            "description": "ID of the last item retrieved",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 13,
              "default": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The post likes returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "likes": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Like"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Like post (DEPRECATED)",
        "description": "Like the post (create like for the post). [DEPRECATED]",
        "tags": [
          "Likes"
        ],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "The ID of the post",
            "required": true,
            "schema": {
              "type": "integer",
              "example": "13",
              "format": "uint64"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The post liked successfully."
          }
        }
      }
    },
    "/likes": {
      "post": {
        "summary": "Like post",
        "description": "Like the post (create like for the post).",
        "tags": [
          "Likes"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "post_id": {
                    "type": "integer",
                    "example": 13,
                    "description": "Unique id of the related post",
                    "format": "uint64"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The post liked successfully."
          }
        }
      }
    },
    "/likes/{likeId}": {
      "delete": {
        "summary": "Unlike",
        "description": "Delete the like (unlike related post).",
        "tags": [
          "Likes"
        ],
        "parameters": [
          {
            "name": "likeId",
            "in": "path",
            "description": "The ID of like",
            "required": true,
            "schema": {
              "type": "integer",
              "example": "13",
              "format": "uint64"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The like deleted successfully."
          }
        }
      }
    },
    "/posts/{postId}/comments": {
      "get": {
        "summary": "Index post comments",
        "description": "Index the comments of the post.",
        "tags": [
          "Comments"
        ],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "The ID of the post",
            "required": true,
            "schema": {
              "type": "integer",
              "example": "13",
              "format": "uint64"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of items to retrieve",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 5,
              "default": 10
            }
          },
          {
            "name": "lastId",
            "in": "query",
            "description": "ID of the last item retrieved",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 13,
              "default": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The post comments returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "comments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Comment"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/comments": {
      "get": {
        "summary": "Index user comments",
        "description": "Index all of the user comments.",
        "tags": [
          "Comments"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The ID of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64",
              "example": "13"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of comments to retrieve",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 5,
              "default": 10
            }
          },
          {
            "name": "lastId",
            "in": "query",
            "description": "ID of the last comment retrieved",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 13,
              "default": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "My comments returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "comments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Comment"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/comments": {
      "post": {
        "summary": "Create comment",
        "description": "Create a new comment.",
        "tags": [
          "Comments"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Comment_New"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The new comment created successfully."
          }
        }
      }
    },
    "/comments/{commentId}": {
      "delete": {
        "summary": "Delete comment",
        "description": "Delete the comment (either my comment or a comment on one of my posts).",
        "tags": [
          "Comments"
        ],
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "The ID of the comment",
            "required": true,
            "schema": {
              "type": "integer",
              "example": "13",
              "format": "uint64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The comment deleted successfully."
          }
        }
      }
    },
    "/search/posts": {
      "get": {
        "summary": "Search posts",
        "description": "Search in all posts.",
        "tags": [
          "Search"
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Rock Music",
              "description": "The search query"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of items to retrieve",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 5,
              "default": 10
            }
          },
          {
            "name": "lastId",
            "in": "query",
            "description": "ID of the last item retrieved",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 13,
              "default": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search results returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "posts": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Post"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/search/users": {
      "get": {
        "summary": "Search users",
        "description": "Search in all users.",
        "tags": [
          "Search"
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Milad Rahimi"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of items to retrieve",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 5,
              "default": 10
            }
          },
          {
            "name": "lastId",
            "in": "query",
            "description": "ID of the last item retrieved",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 13,
              "default": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search results returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "users": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/feed": {
      "get": {
        "summary": "Index feed posts",
        "description": "Index my feed posts.",
        "tags": [
          "Feed"
        ],
        "parameters": [
          {
            "name": "count",
            "in": "query",
            "description": "Number of items to retrieve",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 5,
              "default": 10
            }
          },
          {
            "name": "lastId",
            "in": "query",
            "description": "ID of the last item retrieved",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 13,
              "default": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The feed posts returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "posts": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Post"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "parameters": {
      "accept": {
        "in": "header",
        "name": "Accept",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "application/json"
          ]
        },
        "example": "application/json"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 13,
            "description": "Unique id of the user",
            "format": "uint64"
          },
          "email": {
            "$ref": "#/components/schemas/User_Email"
          },
          "password": {
            "$ref": "#/components/schemas/User_Password"
          },
          "name": {
            "$ref": "#/components/schemas/User_Name"
          },
          "username": {
            "$ref": "#/components/schemas/User_Username"
          },
          "bio": {
            "$ref": "#/components/schemas/User_Bio"
          },
          "image_id": {
            "$ref": "#/components/schemas/User_ImageId"
          },
          "image": {
            "$ref": "#/components/schemas/File"
          },
          "created_at": {
            "type": "string",
            "example": "2023-11-28T13:36:30.956Z",
            "description": "Registration time",
            "format": "date-time"
          }
        }
      },
      "User_Email": {
        "type": "string",
        "example": "i@miladrahimi.com",
        "description": "User email address (unique)",
        "format": "email",
        "maxLength": 191
      },
      "User_Username": {
        "type": "string",
        "example": "milad_rahimi",
        "description": "Unique username (english letters, numbers and underscores)",
        "pattern": "^[a-z0-9_]+$",
        "minLength": 5,
        "maxLength": 20
      },
      "User_Password": {
        "type": "string",
        "example": "Secret69",
        "format": "password",
        "minLength": 8,
        "maxLength": 255,
        "description": "User password (between 8 and 128 characters)"
      },
      "User_Name": {
        "type": "string",
        "example": "Milad",
        "description": "The user's name (full name or nickname)",
        "minLength": 0,
        "maxLength": 20
      },
      "User_Bio": {
        "type": "string",
        "example": "I am so funny!",
        "description": "User biography (description)",
        "minLength": 0,
        "maxLength": 255
      },
      "User_ImageId": {
        "type": "integer",
        "nullable": true,
        "example": 13,
        "description": "Unique id of the image file used for user profile photo",
        "format": "uint64"
      },
      "File": {
        "type": "object",
        "description": "Uploaded audio or image file",
        "properties": {
          "id": {
            "type": "integer",
            "example": 13,
            "description": "Unique id of the file",
            "format": "uint64"
          },
          "user_id": {
            "type": "integer",
            "example": 13,
            "description": "Unique id of the user (file owner)",
            "format": "uint64"
          },
          "path": {
            "type": "string",
            "example": "2023/12/22/audio_1691_4b3a_847f_76b2ed0f00ec.mp3",
            "description": "File path (uri) in the server storage"
          },
          "extension": {
            "$ref": "#/components/schemas/File_Extension"
          }
        }
      },
      "File_Extension": {
        "type": "string",
        "enum": [
          "MP3",
          "JPG"
        ],
        "example": "MP3",
        "description": "File extension"
      },
      "Like": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 13,
            "description": "Unique id of the like entity",
            "format": "uint64"
          },
          "user_id": {
            "type": "integer",
            "example": 13,
            "description": "Unique id of the user (like actor)",
            "format": "uint64"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "created_at": {
            "type": "string",
            "example": "2023-11-28T13:36:30.956Z",
            "description": "Creation time",
            "format": "date-time"
          }
        }
      },
      "Comment": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Post_New"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "example": 13,
                "description": "Unique id for the comment",
                "format": "uint64"
              },
              "user_id": {
                "type": "integer",
                "example": 13,
                "description": "Unique id of the user (comment author)",
                "format": "uint64"
              },
              "user": {
                "$ref": "#/components/schemas/User"
              },
              "post": {
                "$ref": "#/components/schemas/Post"
              },
              "created_at": {
                "type": "string",
                "example": "2023-11-28T13:36:30.956Z",
                "description": "Creation time",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "Comment_New": {
        "type": "object",
        "properties": {
          "post_id": {
            "type": "integer",
            "example": 13,
            "description": "Unique id of the related post",
            "format": "uint64"
          },
          "text": {
            "type": "string",
            "example": "Wow! Nice...",
            "description": "The comment text",
            "minLength": 1,
            "maxLength": 255
          }
        }
      },
      "Post": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Post_New"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "example": 13,
                "description": "Unique id of the post",
                "format": "uint64"
              },
              "image": {
                "$ref": "#/components/schemas/File"
              },
              "audio": {
                "$ref": "#/components/schemas/File"
              },
              "user_id": {
                "type": "integer",
                "example": 13,
                "description": "Unique id of the user (post author)",
                "format": "uint64"
              },
              "user": {
                "$ref": "#/components/schemas/User"
              },
              "likes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Like"
                },
                "description": "List of the distinguished likes"
              },
              "likes_count": {
                "type": "integer",
                "example": 0,
                "description": "Numbers of total likes",
                "format": "uint64"
              },
              "comments_count": {
                "type": "integer",
                "example": 0,
                "description": "Numbers of total comments",
                "format": "uint64"
              },
              "created_at": {
                "type": "string",
                "example": "2023-11-28T13:36:30.956Z",
                "description": "Creation time",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "Post_New": {
        "type": "object",
        "properties": {
          "title": {
            "$ref": "#/components/schemas/Post_Title"
          },
          "description": {
            "$ref": "#/components/schemas/Post_Description"
          },
          "audio_id": {
            "type": "integer",
            "example": 13,
            "description": "Unique id of the audio file",
            "format": "uint64"
          },
          "image_id": {
            "type": "integer",
            "nullable": true,
            "example": 13,
            "description": "Unique id of the image (cover) file",
            "format": "uint64"
          }
        }
      },
      "Post_Title": {
        "type": "string",
        "example": "Blind Owl",
        "description": "The post title",
        "minLength": 1,
        "maxLength": 30
      },
      "Post_Description": {
        "type": "string",
        "example": "This is my first post! #first_post",
        "description": "The post description (content)",
        "minLength": 0,
        "maxLength": 255
      }
    }
  }
}
